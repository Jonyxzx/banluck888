{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { getAuth, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { ref, get, set, update } from 'firebase/database';\nimport { readCurrentUserData } from 'your-file-path'; // Import the readCurrentUserData function from your actual path\nimport { db } from \"../backend/firebase\";\n\n// For new signsup and updating of balance\nconst writePlayerData = async (email, balance, deck, isNew = true) => {\n  _s();\n  const auth = getAuth();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const user = await readCurrentUserData();\n        const dataLocation = 'players';\n        const reference = ref(db, `${dataLocation}/${user}/`);\n        const snapshot = await get(reference);\n        if (snapshot.exists() && isNew) {\n          console.log('Invalid id: id already exists in Employee Data');\n          // You can handle this case as needed, e.g., throw an error\n          throw new Error('Invalid id: id already exists in Employee Data');\n        } else {\n          if (isNew) {\n            await set(ref(db, `${dataLocation}/${user}/`), {\n              email,\n              balance: 1000,\n              deck: []\n            });\n          } else {\n            // We update instead\n            update(ref(db, `employees/${user}/`), {\n              email,\n              balance,\n              deck: []\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error writing employee data:', error);\n        // Handle error as needed\n      }\n    };\n    fetchData();\n  }, []);\n};\n_s(writePlayerData, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nexport default writePlayerData;","map":{"version":3,"names":["useEffect","getAuth","createUserWithEmailAndPassword","ref","get","set","update","readCurrentUserData","db","writePlayerData","email","balance","deck","isNew","_s","auth","fetchData","user","dataLocation","reference","snapshot","exists","console","log","Error","error"],"sources":["/Users/carlintan/Desktop/banluck888/src/backend/command.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { getAuth, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { ref, get, set, update } from 'firebase/database';\nimport { readCurrentUserData } from 'your-file-path'; // Import the readCurrentUserData function from your actual path\nimport { db } from \"../backend/firebase\";\n\n// For new signsup and updating of balance\nconst writePlayerData = async (\n    email,\n    balance,\n    deck,\n    isNew = true,\n) => {\n    const auth = getAuth();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const user = await readCurrentUserData();\n\n                const dataLocation = 'players';\n                const reference = ref(db, `${dataLocation}/${user}/`);\n\n                const snapshot = await get(reference);\n\n                if (snapshot.exists() && isNew) {\n                    console.log(\n                        'Invalid id: id already exists in Employee Data'\n                    );\n                    // You can handle this case as needed, e.g., throw an error\n                    throw new Error(\n                        'Invalid id: id already exists in Employee Data'\n                    );\n                } else {\n                    if (isNew) {\n                        await set(ref(db, `${dataLocation}/${user}/`), {\n                            email,\n                            balance: 1000,\n                            deck: []\n                        });\n                    } else {\n                        // We update instead\n                        update(ref(db, `employees/${user}/`), {\n                            email,\n                            balance,\n                            deck: []\n                        });\n                    }\n                }\n            } catch (error) {\n                console.error('Error writing employee data:', error);\n                // Handle error as needed\n            }\n        };\n\n        fetchData();\n    }, []);\n}\n\nexport default writePlayerData;\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,OAAO,EAAEC,8BAA8B,QAAQ,eAAe;AACvE,SAASC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,MAAM,QAAQ,mBAAmB;AACzD,SAASC,mBAAmB,QAAQ,gBAAgB,CAAC,CAAC;AACtD,SAASC,EAAE,QAAQ,qBAAqB;;AAExC;AACA,MAAMC,eAAe,GAAG,MAAAA,CACpBC,KAAK,EACLC,OAAO,EACPC,IAAI,EACJC,KAAK,GAAG,IAAI,KACX;EAAAC,EAAA;EACD,MAAMC,IAAI,GAAGd,OAAO,CAAC,CAAC;EAEtBD,SAAS,CAAC,MAAM;IACZ,MAAMgB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,IAAI,GAAG,MAAMV,mBAAmB,CAAC,CAAC;QAExC,MAAMW,YAAY,GAAG,SAAS;QAC9B,MAAMC,SAAS,GAAGhB,GAAG,CAACK,EAAE,EAAG,GAAEU,YAAa,IAAGD,IAAK,GAAE,CAAC;QAErD,MAAMG,QAAQ,GAAG,MAAMhB,GAAG,CAACe,SAAS,CAAC;QAErC,IAAIC,QAAQ,CAACC,MAAM,CAAC,CAAC,IAAIR,KAAK,EAAE;UAC5BS,OAAO,CAACC,GAAG,CACP,gDACJ,CAAC;UACD;UACA,MAAM,IAAIC,KAAK,CACX,gDACJ,CAAC;QACL,CAAC,MAAM;UACH,IAAIX,KAAK,EAAE;YACP,MAAMR,GAAG,CAACF,GAAG,CAACK,EAAE,EAAG,GAAEU,YAAa,IAAGD,IAAK,GAAE,CAAC,EAAE;cAC3CP,KAAK;cACLC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE;YACV,CAAC,CAAC;UACN,CAAC,MAAM;YACH;YACAN,MAAM,CAACH,GAAG,CAACK,EAAE,EAAG,aAAYS,IAAK,GAAE,CAAC,EAAE;cAClCP,KAAK;cACLC,OAAO;cACPC,IAAI,EAAE;YACV,CAAC,CAAC;UACN;QACJ;MACJ,CAAC,CAAC,OAAOa,KAAK,EAAE;QACZH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpD;MACJ;IACJ,CAAC;IAEDT,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;AACV,CAAC;AAAAF,EAAA,CAlDKL,eAAe;AAoDrB,eAAeA,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}