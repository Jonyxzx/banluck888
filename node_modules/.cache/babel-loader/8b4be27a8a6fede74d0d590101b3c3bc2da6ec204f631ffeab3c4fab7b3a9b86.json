{"ast":null,"code":"var _s = $RefreshSig$();\nimport { getAuth, createUserWithEmailAndPassword, onAuthStateChanged } from 'firebase/auth';\nimport { ref, get, set, update } from 'firebase/database';\nimport { db } from \"../backend/firebase\";\nimport { useEffect } from 'react';\n\n// For new sign-ups and updating of balance\nconst writePlayerData = async (email, balance, deck, isNew = true) => {\n  _s();\n  const auth = getAuth();\n\n  // Use a custom hook or a functional component for the useEffect\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const user = await readCurrentUserData();\n        const dataLocation = 'players';\n        const reference = ref(db, `${dataLocation}/${user}/`);\n        const snapshot = await get(reference);\n        if (snapshot.exists() && isNew) {\n          console.log('Invalid id: id already exists in Player Data');\n          // You can handle this case as needed, e.g., throw an error\n          throw new Error('Invalid id: id already exists in Player Data');\n        } else {\n          if (isNew) {\n            await set(ref(db, `${dataLocation}/${user}/`), {\n              email,\n              balance: 1000,\n              deck: []\n            });\n          } else {\n            // We update instead\n            update(ref(db, `employees/${user}/`), {\n              email,\n              balance,\n              deck: []\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Error writing employee data:', error);\n        // Handle error as needed\n      }\n    };\n    fetchData();\n  }, []); // The dependency array is empty, meaning this useEffect will only run once.\n};\n_s(writePlayerData, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nconst readCurrentUserData = () => {\n  return new Promise((resolve, reject) => {\n    const auth = getAuth();\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      if (user) {\n        resolve(user.uid);\n      } else {\n        reject(new Error(\"Something went wrong\"));\n      }\n      // Don't forget to unsubscribe when done.\n      unsubscribe();\n    });\n  });\n};\nexport default {\n  writePlayerData,\n  readCurrentUserData\n};","map":{"version":3,"names":["getAuth","createUserWithEmailAndPassword","onAuthStateChanged","ref","get","set","update","db","useEffect","writePlayerData","email","balance","deck","isNew","_s","auth","fetchData","user","readCurrentUserData","dataLocation","reference","snapshot","exists","console","log","Error","error","Promise","resolve","reject","unsubscribe","uid"],"sources":["/Users/carlintan/Desktop/banluck888/src/backend/command.js"],"sourcesContent":["import { getAuth, createUserWithEmailAndPassword, onAuthStateChanged } from 'firebase/auth';\nimport { ref, get, set, update } from 'firebase/database';\nimport { db } from \"../backend/firebase\";\nimport { useEffect } from 'react';\n\n// For new sign-ups and updating of balance\nconst writePlayerData = async (\n    email,\n    balance,\n    deck,\n    isNew = true,\n) => {\n    const auth = getAuth();\n\n    // Use a custom hook or a functional component for the useEffect\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const user = await readCurrentUserData();\n\n                const dataLocation = 'players';\n                const reference = ref(db, `${dataLocation}/${user}/`);\n\n                const snapshot = await get(reference);\n\n                if (snapshot.exists() && isNew) {\n                    console.log(\n                        'Invalid id: id already exists in Player Data'\n                    );\n                    // You can handle this case as needed, e.g., throw an error\n                    throw new Error(\n                        'Invalid id: id already exists in Player Data'\n                    );\n                } else {\n                    if (isNew) {\n                        await set(ref(db, `${dataLocation}/${user}/`), {\n                            email,\n                            balance: 1000,\n                            deck: []\n                        });\n                    } else {\n                        // We update instead\n                        update(ref(db, `employees/${user}/`), {\n                            email,\n                            balance,\n                            deck: []\n                        });\n                    }\n                }\n            } catch (error) {\n                console.error('Error writing employee data:', error);\n                // Handle error as needed\n            }\n        };\n\n        fetchData();\n    }, []); // The dependency array is empty, meaning this useEffect will only run once.\n\n}\n\nconst readCurrentUserData = () => {\n    return new Promise((resolve, reject) => {\n        const auth = getAuth();\n        const unsubscribe = onAuthStateChanged(auth, (user) => {\n            if (user) {\n                resolve(user.uid);\n            } else {\n                reject(new Error(\"Something went wrong\"));\n            }\n            // Don't forget to unsubscribe when done.\n            unsubscribe();\n        });\n    });\n};\n\nexport default {\n    writePlayerData,\n    readCurrentUserData\n};\n"],"mappings":";AAAA,SAASA,OAAO,EAAEC,8BAA8B,EAAEC,kBAAkB,QAAQ,eAAe;AAC3F,SAASC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,MAAM,QAAQ,mBAAmB;AACzD,SAASC,EAAE,QAAQ,qBAAqB;AACxC,SAASC,SAAS,QAAQ,OAAO;;AAEjC;AACA,MAAMC,eAAe,GAAG,MAAAA,CACpBC,KAAK,EACLC,OAAO,EACPC,IAAI,EACJC,KAAK,GAAG,IAAI,KACX;EAAAC,EAAA;EACD,MAAMC,IAAI,GAAGf,OAAO,CAAC,CAAC;;EAEtB;EACAQ,SAAS,CAAC,MAAM;IACZ,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,IAAI,GAAG,MAAMC,mBAAmB,CAAC,CAAC;QAExC,MAAMC,YAAY,GAAG,SAAS;QAC9B,MAAMC,SAAS,GAAGjB,GAAG,CAACI,EAAE,EAAG,GAAEY,YAAa,IAAGF,IAAK,GAAE,CAAC;QAErD,MAAMI,QAAQ,GAAG,MAAMjB,GAAG,CAACgB,SAAS,CAAC;QAErC,IAAIC,QAAQ,CAACC,MAAM,CAAC,CAAC,IAAIT,KAAK,EAAE;UAC5BU,OAAO,CAACC,GAAG,CACP,8CACJ,CAAC;UACD;UACA,MAAM,IAAIC,KAAK,CACX,8CACJ,CAAC;QACL,CAAC,MAAM;UACH,IAAIZ,KAAK,EAAE;YACP,MAAMR,GAAG,CAACF,GAAG,CAACI,EAAE,EAAG,GAAEY,YAAa,IAAGF,IAAK,GAAE,CAAC,EAAE;cAC3CP,KAAK;cACLC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE;YACV,CAAC,CAAC;UACN,CAAC,MAAM;YACH;YACAN,MAAM,CAACH,GAAG,CAACI,EAAE,EAAG,aAAYU,IAAK,GAAE,CAAC,EAAE;cAClCP,KAAK;cACLC,OAAO;cACPC,IAAI,EAAE;YACV,CAAC,CAAC;UACN;QACJ;MACJ,CAAC,CAAC,OAAOc,KAAK,EAAE;QACZH,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpD;MACJ;IACJ,CAAC;IAEDV,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAEZ,CAAC;AAAAF,EAAA,CApDKL,eAAe;AAsDrB,MAAMS,mBAAmB,GAAGA,CAAA,KAAM;EAC9B,OAAO,IAAIS,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC,MAAMd,IAAI,GAAGf,OAAO,CAAC,CAAC;IACtB,MAAM8B,WAAW,GAAG5B,kBAAkB,CAACa,IAAI,EAAGE,IAAI,IAAK;MACnD,IAAIA,IAAI,EAAE;QACNW,OAAO,CAACX,IAAI,CAACc,GAAG,CAAC;MACrB,CAAC,MAAM;QACHF,MAAM,CAAC,IAAIJ,KAAK,CAAC,sBAAsB,CAAC,CAAC;MAC7C;MACA;MACAK,WAAW,CAAC,CAAC;IACjB,CAAC,CAAC;EACN,CAAC,CAAC;AACN,CAAC;AAED,eAAe;EACXrB,eAAe;EACfS;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}