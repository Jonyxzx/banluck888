{"ast":null,"code":"import { getAuth, createUserWithEmailAndPassword, onAuthStateChanged } from 'firebase/auth';\nimport { ref, get, set, update } from 'firebase/database';\nimport { db } from \"../backend/firebase\";\n\n// For new sign-ups and updating of balance\nconst writePlayerData = async (email, balance, deck, isNew = true) => {\n  const auth = getAuth();\n  try {\n    const user = await readCurrentUserData();\n    console.log(user);\n    const dataLocation = \"players\";\n    const reference = ref(db, `${dataLocation}/${user}/`);\n    const snapshot = await get(reference);\n    if (snapshot.exists() && isNew) {\n      console.log(\"Invalid id: id already exists in Data\");\n      // You can handle this case as needed, e.g., throw an error\n      throw new Error(\"Invalid id: id already exists in Data\");\n    } else {\n      if (isNew) {\n        await set(ref(db, `${dataLocation}/${user}/`), {\n          email,\n          balance: 1000,\n          deck\n        });\n      } else {\n        // We update instead\n        update(ref(db, `players/${user}/`), {\n          email,\n          balance,\n          deck\n        });\n      }\n      return user; // Return user.uid on success\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      console.log(\"Error:\", error.message);\n    }\n    // Handle the error as needed\n    throw error;\n  }\n};\nconst readCurrentUserData = async () => {\n  const auth = getAuth();\n  const unsubscribe = onAuthStateChanged(auth, user => {\n    if (user) {\n      return user.uid;\n    }\n    unsubscribe();\n  });\n};\nexport { writePlayerData, readCurrentUserData };","map":{"version":3,"names":["getAuth","createUserWithEmailAndPassword","onAuthStateChanged","ref","get","set","update","db","writePlayerData","email","balance","deck","isNew","auth","user","readCurrentUserData","console","log","dataLocation","reference","snapshot","exists","Error","error","message","unsubscribe","uid"],"sources":["/Users/carlintan/Desktop/banluck888/src/backend/command.js"],"sourcesContent":["import { getAuth, createUserWithEmailAndPassword, onAuthStateChanged } from 'firebase/auth';\nimport { ref, get, set, update } from 'firebase/database';\nimport { db } from \"../backend/firebase\";\n\n// For new sign-ups and updating of balance\nconst writePlayerData = async (\n    email,\n    balance,\n    deck,\n    isNew = true) => {\n    const auth = getAuth();\n\n    try {\n        const user = await readCurrentUserData();\n        console.log(user)\n\n        const dataLocation = \"players\";\n        const reference = ref(db, `${dataLocation}/${user}/`);\n\n        const snapshot = await get(reference);\n\n        if (snapshot.exists() && isNew) {\n            console.log(\"Invalid id: id already exists in Data\");\n            // You can handle this case as needed, e.g., throw an error\n            throw new Error(\"Invalid id: id already exists in Data\");\n        } else {\n            if (isNew) {\n                await set(ref(db, `${dataLocation}/${user}/`), {\n                    email,\n                    balance: 1000,\n                    deck,\n                });\n            } else {\n                // We update instead\n                update(ref(db, `players/${user}/`), {\n                    email,\n                    balance,\n                    deck,\n                });\n            }\n            return user; // Return user.uid on success\n        }\n    } catch (error) {\n        if (error instanceof Error) {\n            console.log(\"Error:\", error.message);\n        }\n        // Handle the error as needed\n        throw error;\n    }\n};\n\nconst readCurrentUserData = async () => {\n    const auth = getAuth();\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n        if (user) {\n            return user.uid\n        }\n        unsubscribe();\n    });\n}\n\nexport {\n    writePlayerData,\n    readCurrentUserData\n};\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,8BAA8B,EAAEC,kBAAkB,QAAQ,eAAe;AAC3F,SAASC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEC,MAAM,QAAQ,mBAAmB;AACzD,SAASC,EAAE,QAAQ,qBAAqB;;AAExC;AACA,MAAMC,eAAe,GAAG,MAAAA,CACpBC,KAAK,EACLC,OAAO,EACPC,IAAI,EACJC,KAAK,GAAG,IAAI,KAAK;EACjB,MAAMC,IAAI,GAAGb,OAAO,CAAC,CAAC;EAEtB,IAAI;IACA,MAAMc,IAAI,GAAG,MAAMC,mBAAmB,CAAC,CAAC;IACxCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IAEjB,MAAMI,YAAY,GAAG,SAAS;IAC9B,MAAMC,SAAS,GAAGhB,GAAG,CAACI,EAAE,EAAG,GAAEW,YAAa,IAAGJ,IAAK,GAAE,CAAC;IAErD,MAAMM,QAAQ,GAAG,MAAMhB,GAAG,CAACe,SAAS,CAAC;IAErC,IAAIC,QAAQ,CAACC,MAAM,CAAC,CAAC,IAAIT,KAAK,EAAE;MAC5BI,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;MACpD;MACA,MAAM,IAAIK,KAAK,CAAC,uCAAuC,CAAC;IAC5D,CAAC,MAAM;MACH,IAAIV,KAAK,EAAE;QACP,MAAMP,GAAG,CAACF,GAAG,CAACI,EAAE,EAAG,GAAEW,YAAa,IAAGJ,IAAK,GAAE,CAAC,EAAE;UAC3CL,KAAK;UACLC,OAAO,EAAE,IAAI;UACbC;QACJ,CAAC,CAAC;MACN,CAAC,MAAM;QACH;QACAL,MAAM,CAACH,GAAG,CAACI,EAAE,EAAG,WAAUO,IAAK,GAAE,CAAC,EAAE;UAChCL,KAAK;UACLC,OAAO;UACPC;QACJ,CAAC,CAAC;MACN;MACA,OAAOG,IAAI,CAAC,CAAC;IACjB;EACJ,CAAC,CAAC,OAAOS,KAAK,EAAE;IACZ,IAAIA,KAAK,YAAYD,KAAK,EAAE;MACxBN,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEM,KAAK,CAACC,OAAO,CAAC;IACxC;IACA;IACA,MAAMD,KAAK;EACf;AACJ,CAAC;AAED,MAAMR,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EACpC,MAAMF,IAAI,GAAGb,OAAO,CAAC,CAAC;EACtB,MAAMyB,WAAW,GAAGvB,kBAAkB,CAACW,IAAI,EAAGC,IAAI,IAAK;IACnD,IAAIA,IAAI,EAAE;MACN,OAAOA,IAAI,CAACY,GAAG;IACnB;IACAD,WAAW,CAAC,CAAC;EACjB,CAAC,CAAC;AACN,CAAC;AAED,SACIjB,eAAe,EACfO,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}