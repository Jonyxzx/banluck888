{"ast":null,"code":"const fs = require('fs');\nconst cardDeck = JSON.parse(fs.readFileSync('cards.json', 'utf-8'));\nfunction shuffleDeck(deck) {\n  return Object.keys(deck).sort(() => Math.random() - 0.5);\n}\nfunction initialiseGame(numPlayers) {\n  const shuffleDeck = shuffleDeck(cardDeck);\n  const players = {};\n  for (let i = 1; i <= numPlayers; i++) {\n    players[`Player${i}`] = {\n      hand: [],\n      score: 0,\n      status: 'Tie'\n    };\n  }\n  const dealer = {\n    hand: [],\n    score: 0\n  };\n  return {\n    shuffledDeck,\n    players,\n    dealer\n  };\n}\nfunction dealCards(gameState) {\n  const {\n    shuffleDeck,\n    players,\n    dealer\n  } = gameState;\n  for (let i = 0; i < 2; i++) {\n    for (const player in players) {\n      players[player].hand.push(shuffleDeck.pop());\n    }\n    dealer.hand.push(shuffleDeck.pop());\n  }\n  return gameState;\n}\nfunction calculateHandValue(hand) {\n  let sum = 0;\n  let numAces = 0;\n  for (const cardIndex of hand) {\n    const card = cardDeck[cardIndex];\n    const values = card.value;\n    sum += values[0];\n    if (values.include(11)) {\n      numAces++;\n    }\n  }\n  while (numAces > 0 && sum > 21) {\n    sum -= 10;\n    numAces--;\n  }\n  return sum;\n}\nfunction determineWinner(gameState) {\n  const {\n    players,\n    dealer\n  } = gameState;\n  const dealerScore = dealer.score;\n  for (const player in players) {\n    const playerScore = players[player].score;\n    if (playerScore > 21) {\n      players[player].status = 'Lose';\n    } else if (dealerScore > 21 || playerScore > dealerScore) {\n      players[player].status = 'Win';\n    } else if (playerScore === dealerScore) {\n      players[player].status = 'Tie';\n    } else {\n      players[player].status = 'Lose';\n    }\n  }\n}\nexport default {\n  shuffleDeck,\n  initialiseGame,\n  dealCards,\n  calculateHandValue,\n  determineWinner\n};","map":{"version":3,"names":["fs","require","cardDeck","JSON","parse","readFileSync","shuffleDeck","deck","Object","keys","sort","Math","random","initialiseGame","numPlayers","players","i","hand","score","status","dealer","shuffledDeck","dealCards","gameState","player","push","pop","calculateHandValue","sum","numAces","cardIndex","card","values","value","include","determineWinner","dealerScore","playerScore"],"sources":["/Users/carlintan/Desktop/banluck888/src/logic/logic.js"],"sourcesContent":["const fs = require('fs');\nconst cardDeck = JSON.parse(fs.readFileSync('cards.json', 'utf-8'));\n\nfunction shuffleDeck(deck) {\n    return Object.keys(deck).sort(() => Math.random() - 0.5)\n}\n\nfunction initialiseGame(numPlayers) {\n    const shuffleDeck = shuffleDeck(cardDeck);\n\n    const players = {};\n    for (let i = 1; i <= numPlayers; i++) {\n        players[`Player${i}`] = {\n            hand: [],\n            score: 0,\n            status: 'Tie'\n        };\n    }\n\n    const dealer = {\n        hand: [],\n        score: 0,\n    };\n\n    return { shuffledDeck, players, dealer };\n}\n\nfunction dealCards(gameState) {\n    const { shuffleDeck, players, dealer } = gameState;\n\n    for (let i = 0; i < 2; i++) {\n        for (const player in players) {\n            players[player].hand.push(shuffleDeck.pop());\n        }\n        dealer.hand.push(shuffleDeck.pop());\n    }\n\n    return gameState;\n}\n\nfunction calculateHandValue(hand) {\n    let sum = 0;\n    let numAces = 0;\n\n    for (const cardIndex of hand) {\n        const card = cardDeck[cardIndex];\n        const values = card.value;\n\n        sum += values[0];\n\n        if (values.include(11)) {\n            numAces++;\n        }\n    }\n\n    while (numAces > 0 && sum > 21) {\n        sum -=10;\n        numAces--;\n    }\n\n    return sum;\n}\n\nfunction determineWinner(gameState) {\n    const { players, dealer } = gameState;\n    const dealerScore = dealer.score;\n\n    for (const player in players) {\n        const playerScore = players[player].score;\n\n        if (playerScore > 21) {\n            players[player].status = 'Lose'\n        } else if (dealerScore > 21 || playerScore > dealerScore) {\n            players[player].status = 'Win'\n        } else if (playerScore === dealerScore) {\n            players[player].status = 'Tie'\n        } else {\n            players[player].status = 'Lose'\n        }\n    }\n}\n\nexport default {shuffleDeck, initialiseGame, dealCards, calculateHandValue, determineWinner}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}